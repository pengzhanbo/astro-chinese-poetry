---
import Breadcrumb from '~/components/Breadcrumb.astro'
import PostContent from '~/components/PostContent.astro'
import PrevNext from '~/components/PrevNext.astro'
import datas from '~/database/qianjiashi.json'
import Layout from '~/layouts/Layout.astro'
import { getPoetriesConfig, pervNext } from '~/supports'
import type { ChapterItem } from '~/types'
import { slugify, slugifyParams } from '~/utils'

export interface Props {
  post: ChapterItem & { author: string }
  index: number
  type: string
}

interface RouteItem {
  params: { title: string; chapter: string }
  props: Props
}

export function getStaticPaths() {
  const res: RouteItem[] = []
  let index = 0
  for (let i = 0; i < datas.content.length; i++) {
    const { type, content } = datas.content[i]
    for (let j = 0; j < content.length; j++) {
      const post = content[j]
      if (typeof post.paragraphs[0] === 'string') {
        res.push({
          params: slugifyParams({ title: type, chapter: post.chapter }),
          props: {
            post: {
              chapter: post.chapter,
              paragraphs: post.paragraphs as string[],
              author: post.author,
            },
            index,
            type,
          },
        })
        index++
      } else {
        for (let k = 0; k < post.paragraphs.length; k++) {
          const par = post.paragraphs[k] as {
            subchapter: string
            paragraphs: string[]
          }
          res.push({
            params: {
              title: slugify(type),
              chapter: slugify(post.chapter, par.subchapter),
            },
            props: {
              post: {
                chapter: `${post.chapter} · ${par.subchapter}`,
                paragraphs: par.paragraphs,
                author: post.author,
              },
              index,
              type,
            },
          })
          index++
        }
      }
    }
  }
  return res
}

const poetry = getPoetriesConfig('qian-jia-shi')!

const { title, id } = poetry
const { paragraphs, chapter, author } = Astro.props.post

const { prev, next } = pervNext(
  getStaticPaths(),
  Astro.props.index,
  ({ params, props }) => ({
    text: `${props.type} · ${props.post.chapter}`,
    link: `/${id}/${params.title}-${params.chapter}`,
  }),
)
---

<Layout title={title} navFixed>
  <div class="py-6 px-5 md:px-10 pb-20">
    <Breadcrumb list={[{ text: title, active: true, link: `/${id}` }]} />
    <div class="pb-4 text-center">
      <h3 class="text-2xl font-bold text-brand mt-10 mb-6">
        {chapter}
      </h3>
      <p>{author}</p>
      <PostContent content={paragraphs} />
    </div>
    <PrevNext {prev} {next} />
  </div>
</Layout>
